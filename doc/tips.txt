//数据库（MySQL、Oracle）、http协议、JavaScript、排序算法、查找算法、spring、springMVC运行过程

do - while 循环中，最后的while()后，必须有分号！！！！；；；；；！！！！！

8      16      32        64   
byte - short - int    - long
     - char  -
             - double - float


成员变量和局部变量之间的区别：
初始值：
1.成员变量是在创建对象的时候才有的，如果创建时没有赋初值，那么所用的成员变量的值都是0值（整型数都是0，char是'\0'，double是0.0，float是0.0f，引用类型的都是null）
2.局部变量在创建的时候，是没有确定值，只能通过赋值操作给予一个确定的数据，在Java中不能使用没有赋值的局部变量

生存周期（在代码中，一个变量或者一个对象从创建开始，到销毁结束，这就是他的生存周期）：
1.成员变量的生存周期是随对象创建而生，随着对象的销毁而不复存在【内存的堆区】
2.局部变量的生存周期是在声明变量的时候产生，在函数结束或者代码块结束的时候销毁【内存的栈区】


二叉树的遍历（三种，前序、中序、后序）：
前序：根左右
中序：左根右
后序：左右根


Java中的构造代码块：
	对一个类的所有对象进行一个统一的初始化操作，只要这个对象被创建，就会执行

{
	执行的代码；
}

【位置】在构造函数之前，在成员变量之后

代码块分为三大类：
	构造代码块
	局部代码块 （缩短局部变量的生存周期）
	静态代码块 static


构造函数、构造代码块和定义时默认值优先级问题：
	在Java中，有三种对于成员变量赋初值的操作：
	1.构造函数
	2.构造代码块
	3.定义时默认值

	优先级问题：
		当存在构造函数时，构造函数中对于成员变量的修改是默认值

		其次：定义时的默认值  和  构造代码块，谁在后面，说确定最终值

		Java编译器在编译代码的时候，会把我们的代码进行重新排序，会将成员变量定义放在整个类的最前面



this关键字的作用：
	1.如果在同一个函数中，出现了和成员变量同名的变量名，可以利用this来区分不同的变量
		this.成员变量 表示使用的是成员变量
	2.this关键字还能调用类当中的其他函数，这里包括成员方法和构造函数



static 静态
用static关键字修饰的变量会变成保存在内存数据区共享变量
这个空间只会创建一次，用于保存数据，可以供多个对象使用

内存分区：栈区、堆区、代码区、数据区

用static修饰和不用static修饰的区别
	1.不用static修饰的是【非静态】成员变量，这个【非静态】成员变量是属于类对象的，是在类对象中保存某些数据
	2.用static修饰的是【静态】成员变量，这个【静态】成员变量与类对象无关，是放在一个数据共享区中供多类使用

	使用static可以节省数据所需要的空间，面向大量数据

static 不单单能够修饰成员变量，也能修饰成员方法
用static修饰的函数/方法，称之为静态函数/方法

格式：
	权限修饰符 static 返回值 函数名（）{
		函数体；
	}
调用方式：
	类对象.静态方法(); ---->报警告
	类名.静态方法(); ---->极力推荐


静态方法的使用注意事项：
	1.静态方法中不能使用非静态的成员变量，可以使用静态的成员变量
	2.静态方法中不能使用this关键字
	3.静态方法中不能调用非静态的成员方法，可以调用静态的成员方法
	4.在静态方法中可以创建一个对象来使用非静态方法


在静态方法中有很多地方都不能涉及到对象的操作，称为“没有对象”
原因：
	1.静态的成员方法或者函数，这些东西都在类文件加载之前，就已经存在于内存空间中，对象可以调用这个静态方法没雷鸣也可以。
	2.这个静态方法时遭遇对象存在的，但是对象销毁了，这个方法依然存在。


使用static修饰成员方法/函数：
	Arrays、sort、binarySearch、toString、copyOf
	如果一个函数没有用到类当中本身的成员变量，所用的数据都是来源于类外，靠参数传递，那么这个函数就可以定义为静态方法/函数


单例模式：
	最终目的：在代码中，这个类，有且只能有一个类对象
	








根据数据库中存储的时间计算年龄 SELECT DATEDIFF(yy，‘出生日期‘, '当前时间')；



jsp转发的方式：
	转发：
	重定向：









Spring框架：
	1.Spring的核心就是控制反转（IoC,Inversion of Control）和面向切面编程（AOP,Aspect Oriented Programming;OOP，面向对象编程）。
	2.特点：
		方便解耦，简化开发
			可以将对象之间的以来关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。
		AOP编程的支持
		声明式事务的支持
		方便程序的测试
		方便继承各种优秀的框架
		降低JavaEE API的使用难度


	3.Spring框架结构
		DAO、ORM、JEE、AOP、CORE

		CORE：核心组件，提供基本的功能，核心主要组件是BeanFactory，是工厂模式的实现。BeanFactory使用控制反转（IoC）模式将应用成熟的配置和依赖性规范与实际的应用程序代码分开

		Spring上下文：一个配置文件，提供上下文信息

		Spring AOP：Spring AOP模块为基于Spring的应用程序中的对象提供了事务管理服务，通过使用Spring AOP，不用依赖EJB组件，就可以将声明性事务集成到应用程序中

		Spring DAO：

		Spring ORM：

		Spring Web模块：

		SpringMVC框架：

		spring的核心要点是：支持不绑定到特定J2EE服务的可充盈业务和数据访问对象。


	4.Spring框架特征
		轻量：Spring是非侵入式的：典型的，Spring应用中的对象不依赖于Spring的特定类


		控制反转：促进低耦合不是对象从容器中寻找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给他

		面向切面：

		容器：

		框架：

		MVC：


	Spring IoC容器
		Spring容器是框架核心，创建对象并将它们连接在一起，配置他们，管理他们的整个生命周期。这些对象就是SpringBeans。

		spring提供了两种不同类型的容器：
			Spring BeanFactory容器：
				最简单的容器，给DI提供了基本的支持，使用org.springframework.beans.factory.BeanFactory接口来定义
			Spring ApplicationContext容器：
				添加更多企业特定的功能，使用org.springframework.context.ApplicationContext定义接口。

		建议使用ApplicationContext，其包括BeanFactory容器中所有功能。

	Spring的BeanFactory容器：
		

















